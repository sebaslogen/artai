// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: screen/v1/screen.proto
//

import Connect
import Foundation
import SwiftProtobuf

internal protocol Screen_V1_ScreenServiceClientInterface: Sendable {

    @available(iOS 13, *)
    func `errorTester`(request: Screen_V1_ErrorTesterRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>

    /// Returns a SDUI screen.
    @available(iOS 13, *)
    func `getScreen`(request: Screen_V1_GetScreenRequest, headers: Connect.Headers) async -> ResponseMessage<Google_Protobuf_Any>
}

/// Concrete implementation of `Screen_V1_ScreenServiceClientInterface`.
internal final class Screen_V1_ScreenServiceClient: Screen_V1_ScreenServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    internal init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    internal func `errorTester`(request: Screen_V1_ErrorTesterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/screen.v1.ScreenService/ErrorTester", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @available(iOS 13, *)
    internal func `getScreen`(request: Screen_V1_GetScreenRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Google_Protobuf_Any> {
        return await self.client.unary(path: "/screen.v1.ScreenService/GetScreen", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    internal enum Metadata {
        internal enum Methods {
            internal static let errorTester = Connect.MethodSpec(name: "ErrorTester", service: "screen.v1.ScreenService", type: .unary)
            internal static let getScreen = Connect.MethodSpec(name: "GetScreen", service: "screen.v1.ScreenService", type: .unary)
        }
    }
}
