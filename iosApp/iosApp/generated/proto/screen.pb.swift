// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: screen/v1/screen.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Style enum for the button
enum Screen_V1_style: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case primary // = 0
  case secondary // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .primary
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .primary
    case 1: self = .secondary
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .primary: return 0
    case .secondary: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Screen_V1_style: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Screen_V1_style] = [
    .primary,
    .secondary,
  ]
}

#endif  // swift(>=4.2)

struct Screen_V1_ErrorTesterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Error code must always be present
  var errorCode: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Screen_V1_GetScreenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Screen ID must always be present
  var screenID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Screen_V1_GetScreenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Screen title must always be present
  var screenTitle: String = String()

  /// Screen description is optional
  var screenDescription: String {
    get {return _screenDescription ?? String()}
    set {_screenDescription = newValue}
  }
  /// Returns true if `screenDescription` has been explicitly set.
  var hasScreenDescription: Bool {return self._screenDescription != nil}
  /// Clears the value of `screenDescription`. Subsequent reads from it will return its default value.
  mutating func clearScreenDescription() {self._screenDescription = nil}

  /// Screen components must always be present
  var components: [Screen_V1_ComponentV1] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _screenDescription: String? = nil
}

struct Screen_V1_ComponentV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var component: Screen_V1_ComponentV1.OneOf_Component? = nil

  var button: Screen_V1_ButtonV1 {
    get {
      if case .button(let v)? = component {return v}
      return Screen_V1_ButtonV1()
    }
    set {component = .button(newValue)}
  }

  var card: Screen_V1_CardV1 {
    get {
      if case .card(let v)? = component {return v}
      return Screen_V1_CardV1()
    }
    set {component = .card(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Component: Equatable {
    case button(Screen_V1_ButtonV1)
    case card(Screen_V1_CardV1)

  #if !swift(>=4.1)
    static func ==(lhs: Screen_V1_ComponentV1.OneOf_Component, rhs: Screen_V1_ComponentV1.OneOf_Component) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.button, .button): return {
        guard case .button(let l) = lhs, case .button(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.card, .card): return {
        guard case .card(let l) = lhs, case .card(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Screen_V1_ButtonV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Button ID must always be present
  var buttonID: String = String()

  /// Button title must always be present
  var buttonTitle: String = String()

  /// Wether the button is enabled
  var buttonStyle: Screen_V1_style = .primary

  /// Button description is optional
  var buttonDescription: String {
    get {return _buttonDescription ?? String()}
    set {_buttonDescription = newValue}
  }
  /// Returns true if `buttonDescription` has been explicitly set.
  var hasButtonDescription: Bool {return self._buttonDescription != nil}
  /// Clears the value of `buttonDescription`. Subsequent reads from it will return its default value.
  mutating func clearButtonDescription() {self._buttonDescription = nil}

  /// Button metadata is optional
  var buttonMetadata: Dictionary<String,Screen_V1_style> = [:]

  /// Optional action description
  var buttonAction: Screen_V1_ButtonAction {
    get {return _buttonAction ?? Screen_V1_ButtonAction()}
    set {_buttonAction = newValue}
  }
  /// Returns true if `buttonAction` has been explicitly set.
  var hasButtonAction: Bool {return self._buttonAction != nil}
  /// Clears the value of `buttonAction`. Subsequent reads from it will return its default value.
  mutating func clearButtonAction() {self._buttonAction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _buttonDescription: String? = nil
  fileprivate var _buttonAction: Screen_V1_ButtonAction? = nil
}

struct Screen_V1_ButtonAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var actionID: String = String()

  var actionTitle: String = String()

  var actionDescription: String = String()

  var actionEnabled: Bool {
    get {return _actionEnabled ?? false}
    set {_actionEnabled = newValue}
  }
  /// Returns true if `actionEnabled` has been explicitly set.
  var hasActionEnabled: Bool {return self._actionEnabled != nil}
  /// Clears the value of `actionEnabled`. Subsequent reads from it will return its default value.
  mutating func clearActionEnabled() {self._actionEnabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _actionEnabled: Bool? = nil
}

struct Screen_V1_CardV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Card ID must always be present
  var cardID: String = String()

  /// Card title must always be present
  var cardTitle: String = String()

  /// Style of the card
  var cardStyle: Screen_V1_style {
    get {return _cardStyle ?? .primary}
    set {_cardStyle = newValue}
  }
  /// Returns true if `cardStyle` has been explicitly set.
  var hasCardStyle: Bool {return self._cardStyle != nil}
  /// Clears the value of `cardStyle`. Subsequent reads from it will return its default value.
  mutating func clearCardStyle() {self._cardStyle = nil}

  /// Card description is optional
  var cardDescription: String {
    get {return _cardDescription ?? String()}
    set {_cardDescription = newValue}
  }
  /// Returns true if `cardDescription` has been explicitly set.
  var hasCardDescription: Bool {return self._cardDescription != nil}
  /// Clears the value of `cardDescription`. Subsequent reads from it will return its default value.
  mutating func clearCardDescription() {self._cardDescription = nil}

  /// Card image is optional
  var cardImage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cardStyle: Screen_V1_style? = nil
  fileprivate var _cardDescription: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Screen_V1_style: @unchecked Sendable {}
extension Screen_V1_ErrorTesterRequest: @unchecked Sendable {}
extension Screen_V1_GetScreenRequest: @unchecked Sendable {}
extension Screen_V1_GetScreenResponse: @unchecked Sendable {}
extension Screen_V1_ComponentV1: @unchecked Sendable {}
extension Screen_V1_ComponentV1.OneOf_Component: @unchecked Sendable {}
extension Screen_V1_ButtonV1: @unchecked Sendable {}
extension Screen_V1_ButtonAction: @unchecked Sendable {}
extension Screen_V1_CardV1: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "screen.v1"

extension Screen_V1_style: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRIMARY"),
    1: .same(proto: "SECONDARY"),
  ]
}

extension Screen_V1_ErrorTesterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ErrorTesterRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.errorCode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.errorCode != 0 {
      try visitor.visitSingularInt32Field(value: self.errorCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Screen_V1_ErrorTesterRequest, rhs: Screen_V1_ErrorTesterRequest) -> Bool {
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Screen_V1_GetScreenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetScreenRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "screen_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.screenID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.screenID.isEmpty {
      try visitor.visitSingularStringField(value: self.screenID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Screen_V1_GetScreenRequest, rhs: Screen_V1_GetScreenRequest) -> Bool {
    if lhs.screenID != rhs.screenID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Screen_V1_GetScreenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetScreenResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "screen_title"),
    2: .standard(proto: "screen_description"),
    3: .same(proto: "components"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.screenTitle) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._screenDescription) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.components) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.screenTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.screenTitle, fieldNumber: 1)
    }
    try { if let v = self._screenDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.components.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.components, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Screen_V1_GetScreenResponse, rhs: Screen_V1_GetScreenResponse) -> Bool {
    if lhs.screenTitle != rhs.screenTitle {return false}
    if lhs._screenDescription != rhs._screenDescription {return false}
    if lhs.components != rhs.components {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Screen_V1_ComponentV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ComponentV1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "button"),
    2: .same(proto: "card"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Screen_V1_ButtonV1?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .button(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .button(v)
        }
      }()
      case 2: try {
        var v: Screen_V1_CardV1?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .card(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .card(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.component {
    case .button?: try {
      guard case .button(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .card?: try {
      guard case .card(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Screen_V1_ComponentV1, rhs: Screen_V1_ComponentV1) -> Bool {
    if lhs.component != rhs.component {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Screen_V1_ButtonV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ButtonV1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "button_id"),
    2: .standard(proto: "button_title"),
    3: .standard(proto: "button_style"),
    4: .standard(proto: "button_description"),
    5: .standard(proto: "button_metadata"),
    6: .standard(proto: "button_action"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.buttonID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.buttonTitle) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.buttonStyle) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._buttonDescription) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufString,Screen_V1_style>.self, value: &self.buttonMetadata) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._buttonAction) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.buttonID.isEmpty {
      try visitor.visitSingularStringField(value: self.buttonID, fieldNumber: 1)
    }
    if !self.buttonTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.buttonTitle, fieldNumber: 2)
    }
    if self.buttonStyle != .primary {
      try visitor.visitSingularEnumField(value: self.buttonStyle, fieldNumber: 3)
    }
    try { if let v = self._buttonDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    if !self.buttonMetadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufString,Screen_V1_style>.self, value: self.buttonMetadata, fieldNumber: 5)
    }
    try { if let v = self._buttonAction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Screen_V1_ButtonV1, rhs: Screen_V1_ButtonV1) -> Bool {
    if lhs.buttonID != rhs.buttonID {return false}
    if lhs.buttonTitle != rhs.buttonTitle {return false}
    if lhs.buttonStyle != rhs.buttonStyle {return false}
    if lhs._buttonDescription != rhs._buttonDescription {return false}
    if lhs.buttonMetadata != rhs.buttonMetadata {return false}
    if lhs._buttonAction != rhs._buttonAction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Screen_V1_ButtonAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ButtonAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "action_id"),
    2: .standard(proto: "action_title"),
    3: .standard(proto: "action_description"),
    4: .standard(proto: "action_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.actionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.actionTitle) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.actionDescription) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._actionEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.actionID.isEmpty {
      try visitor.visitSingularStringField(value: self.actionID, fieldNumber: 1)
    }
    if !self.actionTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.actionTitle, fieldNumber: 2)
    }
    if !self.actionDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.actionDescription, fieldNumber: 3)
    }
    try { if let v = self._actionEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Screen_V1_ButtonAction, rhs: Screen_V1_ButtonAction) -> Bool {
    if lhs.actionID != rhs.actionID {return false}
    if lhs.actionTitle != rhs.actionTitle {return false}
    if lhs.actionDescription != rhs.actionDescription {return false}
    if lhs._actionEnabled != rhs._actionEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Screen_V1_CardV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CardV1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "card_id"),
    2: .standard(proto: "card_title"),
    3: .standard(proto: "card_style"),
    4: .standard(proto: "card_description"),
    5: .standard(proto: "card_image"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cardID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cardTitle) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._cardStyle) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._cardDescription) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.cardImage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.cardID.isEmpty {
      try visitor.visitSingularStringField(value: self.cardID, fieldNumber: 1)
    }
    if !self.cardTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.cardTitle, fieldNumber: 2)
    }
    try { if let v = self._cardStyle {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._cardDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    if !self.cardImage.isEmpty {
      try visitor.visitSingularStringField(value: self.cardImage, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Screen_V1_CardV1, rhs: Screen_V1_CardV1) -> Bool {
    if lhs.cardID != rhs.cardID {return false}
    if lhs.cardTitle != rhs.cardTitle {return false}
    if lhs._cardStyle != rhs._cardStyle {return false}
    if lhs._cardDescription != rhs._cardDescription {return false}
    if lhs.cardImage != rhs.cardImage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
