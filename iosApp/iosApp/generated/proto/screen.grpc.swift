 //
 // DO NOT EDIT.
 //
 // Generated by the protocol buffer compiler.
 // Source: screen.proto
 //

 //
 // Copyright 2018, gRPC Authors All rights reserved.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
 // You may obtain a copy of the License at
 //
 //     http://www.apache.org/licenses/LICENSE-2.0
 //
 // Unless required by applicable law or agreed to in writing, software
 // distributed under the License is distributed on an "AS IS" BASIS,
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
 //
 import GRPC
 import NIO
 import SwiftProtobuf


 /// Usage: instantiate `Screen_V1_ScreenServiceClient`, then call methods of this protocol to make API calls.
 internal protocol Screen_V1_ScreenServiceClientProtocol: GRPCClient {
   var serviceName: String { get }
   var interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol? { get }

   func errorTester(
     _ request: Screen_V1_ErrorTesterRequest,
     callOptions: CallOptions?
   ) -> UnaryCall<Screen_V1_ErrorTesterRequest, SwiftProtobuf.Google_Protobuf_Empty>

   func getScreen(
     _ request: Screen_V1_GetScreenRequest,
     callOptions: CallOptions?
   ) -> UnaryCall<Screen_V1_GetScreenRequest, Screen_V1_GetScreenResponse>
 }

 extension Screen_V1_ScreenServiceClientProtocol {
   internal var serviceName: String {
     return "screen.v1.ScreenService"
   }

   /// Unary call to ErrorTester
   ///
   /// - Parameters:
   ///   - request: Request to send to ErrorTester.
   ///   - callOptions: Call options.
   /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
   internal func errorTester(
     _ request: Screen_V1_ErrorTesterRequest,
     callOptions: CallOptions? = nil
   ) -> UnaryCall<Screen_V1_ErrorTesterRequest, SwiftProtobuf.Google_Protobuf_Empty> {
     return self.makeUnaryCall(
       path: "/screen.v1.ScreenService/ErrorTester",
       request: request,
       callOptions: callOptions ?? self.defaultCallOptions,
       interceptors: self.interceptors?.makeErrorTesterInterceptors() ?? []
     )
   }

   /// Returns a SDUI screen.
   ///
   /// - Parameters:
   ///   - request: Request to send to GetScreen.
   ///   - callOptions: Call options.
   /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
   internal func getScreen(
     _ request: Screen_V1_GetScreenRequest,
     callOptions: CallOptions? = nil
   ) -> UnaryCall<Screen_V1_GetScreenRequest, Screen_V1_GetScreenResponse> {
     return self.makeUnaryCall(
       path: "/screen.v1.ScreenService/GetScreen",
       request: request,
       callOptions: callOptions ?? self.defaultCallOptions,
       interceptors: self.interceptors?.makeGetScreenInterceptors() ?? []
     )
   }
 }

 internal protocol Screen_V1_ScreenServiceClientInterceptorFactoryProtocol {

   /// - Returns: Interceptors to use when invoking 'errorTester'.
   func makeErrorTesterInterceptors() -> [ClientInterceptor<Screen_V1_ErrorTesterRequest, SwiftProtobuf.Google_Protobuf_Empty>]

   /// - Returns: Interceptors to use when invoking 'getScreen'.
   func makeGetScreenInterceptors() -> [ClientInterceptor<Screen_V1_GetScreenRequest, Screen_V1_GetScreenResponse>]
 }

 internal final class Screen_V1_ScreenServiceClient: Screen_V1_ScreenServiceClientProtocol {
   internal let channel: GRPCChannel
   internal var defaultCallOptions: CallOptions
   internal var interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol?

   /// Creates a client for the screen.v1.ScreenService service.
   ///
   /// - Parameters:
   ///   - channel: `GRPCChannel` to the service host.
   ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
   ///   - interceptors: A factory providing interceptors for each RPC.
   internal init(
     channel: GRPCChannel,
     defaultCallOptions: CallOptions = CallOptions(),
     interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol? = nil
   ) {
     self.channel = channel
     self.defaultCallOptions = defaultCallOptions
     self.interceptors = interceptors
   }
 }
