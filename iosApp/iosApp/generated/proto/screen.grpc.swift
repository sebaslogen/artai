//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: screen/v1/screen.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Screen_V1_ScreenServiceClient`, then call methods of this protocol to make API calls.
internal protocol Screen_V1_ScreenServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol? { get }

  func errorTester(
    _ request: Screen_V1_ErrorTesterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Screen_V1_ErrorTesterRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getScreen(
    _ request: Screen_V1_GetScreenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Screen_V1_GetScreenRequest, Screen_V1_GetScreenResponse>
}

extension Screen_V1_ScreenServiceClientProtocol {
  internal var serviceName: String {
    return "screen.v1.ScreenService"
  }

  /// Unary call to ErrorTester
  ///
  /// - Parameters:
  ///   - request: Request to send to ErrorTester.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func errorTester(
    _ request: Screen_V1_ErrorTesterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Screen_V1_ErrorTesterRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Screen_V1_ScreenServiceClientMetadata.Methods.errorTester.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeErrorTesterInterceptors() ?? []
    )
  }

  /// Returns a SDUI screen.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetScreen.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getScreen(
    _ request: Screen_V1_GetScreenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Screen_V1_GetScreenRequest, Screen_V1_GetScreenResponse> {
    return self.makeUnaryCall(
      path: Screen_V1_ScreenServiceClientMetadata.Methods.getScreen.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetScreenInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Screen_V1_ScreenServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Screen_V1_ScreenServiceNIOClient")
internal final class Screen_V1_ScreenServiceClient: Screen_V1_ScreenServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the screen.v1.ScreenService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Screen_V1_ScreenServiceNIOClient: Screen_V1_ScreenServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the screen.v1.ScreenService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Screen_V1_ScreenServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol? { get }

  func makeErrorTesterCall(
    _ request: Screen_V1_ErrorTesterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Screen_V1_ErrorTesterRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetScreenCall(
    _ request: Screen_V1_GetScreenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Screen_V1_GetScreenRequest, Screen_V1_GetScreenResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Screen_V1_ScreenServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Screen_V1_ScreenServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeErrorTesterCall(
    _ request: Screen_V1_ErrorTesterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Screen_V1_ErrorTesterRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Screen_V1_ScreenServiceClientMetadata.Methods.errorTester.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeErrorTesterInterceptors() ?? []
    )
  }

  internal func makeGetScreenCall(
    _ request: Screen_V1_GetScreenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Screen_V1_GetScreenRequest, Screen_V1_GetScreenResponse> {
    return self.makeAsyncUnaryCall(
      path: Screen_V1_ScreenServiceClientMetadata.Methods.getScreen.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetScreenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Screen_V1_ScreenServiceAsyncClientProtocol {
  internal func errorTester(
    _ request: Screen_V1_ErrorTesterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Screen_V1_ScreenServiceClientMetadata.Methods.errorTester.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeErrorTesterInterceptors() ?? []
    )
  }

  internal func getScreen(
    _ request: Screen_V1_GetScreenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Screen_V1_GetScreenResponse {
    return try await self.performAsyncUnaryCall(
      path: Screen_V1_ScreenServiceClientMetadata.Methods.getScreen.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetScreenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Screen_V1_ScreenServiceAsyncClient: Screen_V1_ScreenServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Screen_V1_ScreenServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Screen_V1_ScreenServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'errorTester'.
  func makeErrorTesterInterceptors() -> [ClientInterceptor<Screen_V1_ErrorTesterRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getScreen'.
  func makeGetScreenInterceptors() -> [ClientInterceptor<Screen_V1_GetScreenRequest, Screen_V1_GetScreenResponse>]
}

internal enum Screen_V1_ScreenServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ScreenService",
    fullName: "screen.v1.ScreenService",
    methods: [
      Screen_V1_ScreenServiceClientMetadata.Methods.errorTester,
      Screen_V1_ScreenServiceClientMetadata.Methods.getScreen,
    ]
  )

  internal enum Methods {
    internal static let errorTester = GRPCMethodDescriptor(
      name: "ErrorTester",
      path: "/screen.v1.ScreenService/ErrorTester",
      type: GRPCCallType.unary
    )

    internal static let getScreen = GRPCMethodDescriptor(
      name: "GetScreen",
      path: "/screen.v1.ScreenService/GetScreen",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Screen_V1_ScreenServiceProvider: CallHandlerProvider {
  var interceptors: Screen_V1_ScreenServiceServerInterceptorFactoryProtocol? { get }

  func errorTester(request: Screen_V1_ErrorTesterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Returns a SDUI screen.
  func getScreen(request: Screen_V1_GetScreenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Screen_V1_GetScreenResponse>
}

extension Screen_V1_ScreenServiceProvider {
  internal var serviceName: Substring {
    return Screen_V1_ScreenServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ErrorTester":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Screen_V1_ErrorTesterRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeErrorTesterInterceptors() ?? [],
        userFunction: self.errorTester(request:context:)
      )

    case "GetScreen":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Screen_V1_GetScreenRequest>(),
        responseSerializer: ProtobufSerializer<Screen_V1_GetScreenResponse>(),
        interceptors: self.interceptors?.makeGetScreenInterceptors() ?? [],
        userFunction: self.getScreen(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Screen_V1_ScreenServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Screen_V1_ScreenServiceServerInterceptorFactoryProtocol? { get }

  func errorTester(
    request: Screen_V1_ErrorTesterRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Returns a SDUI screen.
  func getScreen(
    request: Screen_V1_GetScreenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Screen_V1_GetScreenResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Screen_V1_ScreenServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Screen_V1_ScreenServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Screen_V1_ScreenServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Screen_V1_ScreenServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ErrorTester":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Screen_V1_ErrorTesterRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeErrorTesterInterceptors() ?? [],
        wrapping: { try await self.errorTester(request: $0, context: $1) }
      )

    case "GetScreen":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Screen_V1_GetScreenRequest>(),
        responseSerializer: ProtobufSerializer<Screen_V1_GetScreenResponse>(),
        interceptors: self.interceptors?.makeGetScreenInterceptors() ?? [],
        wrapping: { try await self.getScreen(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Screen_V1_ScreenServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'errorTester'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeErrorTesterInterceptors() -> [ServerInterceptor<Screen_V1_ErrorTesterRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getScreen'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetScreenInterceptors() -> [ServerInterceptor<Screen_V1_GetScreenRequest, Screen_V1_GetScreenResponse>]
}

internal enum Screen_V1_ScreenServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ScreenService",
    fullName: "screen.v1.ScreenService",
    methods: [
      Screen_V1_ScreenServiceServerMetadata.Methods.errorTester,
      Screen_V1_ScreenServiceServerMetadata.Methods.getScreen,
    ]
  )

  internal enum Methods {
    internal static let errorTester = GRPCMethodDescriptor(
      name: "ErrorTester",
      path: "/screen.v1.ScreenService/ErrorTester",
      type: GRPCCallType.unary
    )

    internal static let getScreen = GRPCMethodDescriptor(
      name: "GetScreen",
      path: "/screen.v1.ScreenService/GetScreen",
      type: GRPCCallType.unary
    )
  }
}
