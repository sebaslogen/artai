// Code generated by Wire protocol buffer compiler, do not edit.
// Source: screen.v1.CardV1 in screen.proto
package screen.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class CardV1(
  /**
   * Card ID must always be present
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "cardId",
    schemaIndex = 0,
  )
  public val card_id: String = "",
  /**
   * Card title must always be present
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "cardTitle",
    schemaIndex = 1,
  )
  public val card_title: String = "",
  /**
   * Style of the card
   */
  @field:WireField(
    tag = 3,
    adapter = "screen.v1.style#ADAPTER",
    jsonName = "cardStyle",
    schemaIndex = 2,
  )
  public val card_style: style? = null,
  /**
   * Card description is optional
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "cardDescription",
    schemaIndex = 3,
  )
  public val card_description: String? = null,
  /**
   * Card image is optional
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "cardImage",
    schemaIndex = 4,
  )
  public val card_image: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<CardV1, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CardV1) return false
    if (unknownFields != other.unknownFields) return false
    if (card_id != other.card_id) return false
    if (card_title != other.card_title) return false
    if (card_style != other.card_style) return false
    if (card_description != other.card_description) return false
    if (card_image != other.card_image) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + card_id.hashCode()
      result = result * 37 + card_title.hashCode()
      result = result * 37 + (card_style?.hashCode() ?: 0)
      result = result * 37 + (card_description?.hashCode() ?: 0)
      result = result * 37 + card_image.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """card_id=${sanitize(card_id)}"""
    result += """card_title=${sanitize(card_title)}"""
    if (card_style != null) result += """card_style=$card_style"""
    if (card_description != null) result += """card_description=${sanitize(card_description)}"""
    result += """card_image=${sanitize(card_image)}"""
    return result.joinToString(prefix = "CardV1{", separator = ", ", postfix = "}")
  }

  public fun copy(
    card_id: String = this.card_id,
    card_title: String = this.card_title,
    card_style: style? = this.card_style,
    card_description: String? = this.card_description,
    card_image: String = this.card_image,
    unknownFields: ByteString = this.unknownFields,
  ): CardV1 = CardV1(card_id, card_title, card_style, card_description, card_image, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<CardV1> = object : ProtoAdapter<CardV1>(
      FieldEncoding.LENGTH_DELIMITED, 
      CardV1::class, 
      "type.googleapis.com/screen.v1.CardV1", 
      PROTO_3, 
      null, 
      "screen.proto"
    ) {
      override fun encodedSize(`value`: CardV1): Int {
        var size = value.unknownFields.size
        if (value.card_id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.card_id)
        if (value.card_title != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.card_title)
        size += style.ADAPTER.encodedSizeWithTag(3, value.card_style)
        size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.card_description)
        if (value.card_image != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5,
            value.card_image)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: CardV1) {
        if (value.card_id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.card_id)
        if (value.card_title != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.card_title)
        style.ADAPTER.encodeWithTag(writer, 3, value.card_style)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.card_description)
        if (value.card_image != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.card_image)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: CardV1) {
        writer.writeBytes(value.unknownFields)
        if (value.card_image != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.card_image)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.card_description)
        style.ADAPTER.encodeWithTag(writer, 3, value.card_style)
        if (value.card_title != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.card_title)
        if (value.card_id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.card_id)
      }

      override fun decode(reader: ProtoReader): CardV1 {
        var card_id: String = ""
        var card_title: String = ""
        var card_style: style? = null
        var card_description: String? = null
        var card_image: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> card_id = ProtoAdapter.STRING.decode(reader)
            2 -> card_title = ProtoAdapter.STRING.decode(reader)
            3 -> try {
              card_style = style.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            4 -> card_description = ProtoAdapter.STRING.decode(reader)
            5 -> card_image = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return CardV1(
          card_id = card_id,
          card_title = card_title,
          card_style = card_style,
          card_description = card_description,
          card_image = card_image,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: CardV1): CardV1 = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
