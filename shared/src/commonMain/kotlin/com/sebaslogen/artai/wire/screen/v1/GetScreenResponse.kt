// Code generated by Wire protocol buffer compiler, do not edit.
// Source: screen.v1.GetScreenResponse in screen.proto
package screen.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import okio.ByteString

public class GetScreenResponse(
  /**
   * Screen title must always be present
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "screenTitle",
    schemaIndex = 0,
  )
  public val screen_title: String = "",
  /**
   * Screen description is optional
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "screenDescription",
    schemaIndex = 1,
  )
  public val screen_description: String? = null,
  components: List<ComponentV1> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<GetScreenResponse, Nothing>(ADAPTER, unknownFields) {
  /**
   * Screen components must always be present
   */
  @field:WireField(
    tag = 3,
    adapter = "screen.v1.ComponentV1#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 2,
  )
  public val components: List<ComponentV1> = immutableCopyOf("components", components)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is GetScreenResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (screen_title != other.screen_title) return false
    if (screen_description != other.screen_description) return false
    if (components != other.components) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + screen_title.hashCode()
      result = result * 37 + (screen_description?.hashCode() ?: 0)
      result = result * 37 + components.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """screen_title=${sanitize(screen_title)}"""
    if (screen_description != null) result +=
        """screen_description=${sanitize(screen_description)}"""
    if (components.isNotEmpty()) result += """components=$components"""
    return result.joinToString(prefix = "GetScreenResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    screen_title: String = this.screen_title,
    screen_description: String? = this.screen_description,
    components: List<ComponentV1> = this.components,
    unknownFields: ByteString = this.unknownFields,
  ): GetScreenResponse = GetScreenResponse(screen_title, screen_description, components,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<GetScreenResponse> = object : ProtoAdapter<GetScreenResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      GetScreenResponse::class, 
      "type.googleapis.com/screen.v1.GetScreenResponse", 
      PROTO_3, 
      null, 
      "screen.proto"
    ) {
      override fun encodedSize(`value`: GetScreenResponse): Int {
        var size = value.unknownFields.size
        if (value.screen_title != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.screen_title)
        size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.screen_description)
        size += ComponentV1.ADAPTER.asRepeated().encodedSizeWithTag(3, value.components)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: GetScreenResponse) {
        if (value.screen_title != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.screen_title)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.screen_description)
        ComponentV1.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.components)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: GetScreenResponse) {
        writer.writeBytes(value.unknownFields)
        ComponentV1.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.components)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.screen_description)
        if (value.screen_title != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.screen_title)
      }

      override fun decode(reader: ProtoReader): GetScreenResponse {
        var screen_title: String = ""
        var screen_description: String? = null
        val components = mutableListOf<ComponentV1>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> screen_title = ProtoAdapter.STRING.decode(reader)
            2 -> screen_description = ProtoAdapter.STRING.decode(reader)
            3 -> components.add(ComponentV1.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return GetScreenResponse(
          screen_title = screen_title,
          screen_description = screen_description,
          components = components,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: GetScreenResponse): GetScreenResponse = value.copy(
        components = value.components.redactElements(ComponentV1.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
