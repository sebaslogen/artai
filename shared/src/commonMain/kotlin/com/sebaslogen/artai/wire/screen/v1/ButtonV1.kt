// Code generated by Wire protocol buffer compiler, do not edit.
// Source: screen.v1.ButtonV1 in screen.proto
package screen.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.Map
import kotlin.lazy
import okio.ByteString

public class ButtonV1(
  /**
   * Button ID must always be present
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "buttonId",
    schemaIndex = 0,
  )
  public val button_id: String = "",
  /**
   * Button title must always be present
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "buttonTitle",
    schemaIndex = 1,
  )
  public val button_title: String = "",
  /**
   * Wether the button is enabled
   */
  @field:WireField(
    tag = 3,
    adapter = "screen.v1.style#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "buttonStyle",
    schemaIndex = 2,
  )
  public val button_style: style = style.PRIMARY,
  /**
   * Button description is optional
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "buttonDescription",
    schemaIndex = 3,
  )
  public val button_description: String? = null,
  button_metadata: Map<String, style> = emptyMap(),
  /**
   * Optional action description
   */
  @field:WireField(
    tag = 6,
    adapter = "screen.v1.ButtonAction#ADAPTER",
    jsonName = "buttonAction",
    schemaIndex = 5,
  )
  public val button_action: ButtonAction? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ButtonV1, Nothing>(ADAPTER, unknownFields) {
  /**
   * Button metadata is optional
   */
  @field:WireField(
    tag = 5,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "screen.v1.style#ADAPTER",
    jsonName = "buttonMetadata",
    schemaIndex = 4,
  )
  public val button_metadata: Map<String, style> = immutableCopyOf("button_metadata",
      button_metadata)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ButtonV1) return false
    if (unknownFields != other.unknownFields) return false
    if (button_id != other.button_id) return false
    if (button_title != other.button_title) return false
    if (button_style != other.button_style) return false
    if (button_description != other.button_description) return false
    if (button_metadata != other.button_metadata) return false
    if (button_action != other.button_action) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + button_id.hashCode()
      result = result * 37 + button_title.hashCode()
      result = result * 37 + button_style.hashCode()
      result = result * 37 + (button_description?.hashCode() ?: 0)
      result = result * 37 + button_metadata.hashCode()
      result = result * 37 + (button_action?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """button_id=${sanitize(button_id)}"""
    result += """button_title=${sanitize(button_title)}"""
    result += """button_style=$button_style"""
    if (button_description != null) result +=
        """button_description=${sanitize(button_description)}"""
    if (button_metadata.isNotEmpty()) result += """button_metadata=$button_metadata"""
    if (button_action != null) result += """button_action=$button_action"""
    return result.joinToString(prefix = "ButtonV1{", separator = ", ", postfix = "}")
  }

  public fun copy(
    button_id: String = this.button_id,
    button_title: String = this.button_title,
    button_style: style = this.button_style,
    button_description: String? = this.button_description,
    button_metadata: Map<String, style> = this.button_metadata,
    button_action: ButtonAction? = this.button_action,
    unknownFields: ByteString = this.unknownFields,
  ): ButtonV1 = ButtonV1(button_id, button_title, button_style, button_description, button_metadata,
      button_action, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ButtonV1> = object : ProtoAdapter<ButtonV1>(
      FieldEncoding.LENGTH_DELIMITED, 
      ButtonV1::class, 
      "type.googleapis.com/screen.v1.ButtonV1", 
      PROTO_3, 
      null, 
      "screen.proto"
    ) {
      private val button_metadataAdapter: ProtoAdapter<Map<String, style>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, style.ADAPTER) }

      override fun encodedSize(`value`: ButtonV1): Int {
        var size = value.unknownFields.size
        if (value.button_id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.button_id)
        if (value.button_title != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.button_title)
        if (value.button_style != style.PRIMARY) size += style.ADAPTER.encodedSizeWithTag(3,
            value.button_style)
        size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.button_description)
        size += button_metadataAdapter.encodedSizeWithTag(5, value.button_metadata)
        size += ButtonAction.ADAPTER.encodedSizeWithTag(6, value.button_action)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ButtonV1) {
        if (value.button_id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.button_id)
        if (value.button_title != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.button_title)
        if (value.button_style != style.PRIMARY) style.ADAPTER.encodeWithTag(writer, 3,
            value.button_style)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.button_description)
        button_metadataAdapter.encodeWithTag(writer, 5, value.button_metadata)
        ButtonAction.ADAPTER.encodeWithTag(writer, 6, value.button_action)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ButtonV1) {
        writer.writeBytes(value.unknownFields)
        ButtonAction.ADAPTER.encodeWithTag(writer, 6, value.button_action)
        button_metadataAdapter.encodeWithTag(writer, 5, value.button_metadata)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.button_description)
        if (value.button_style != style.PRIMARY) style.ADAPTER.encodeWithTag(writer, 3,
            value.button_style)
        if (value.button_title != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.button_title)
        if (value.button_id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.button_id)
      }

      override fun decode(reader: ProtoReader): ButtonV1 {
        var button_id: String = ""
        var button_title: String = ""
        var button_style: style = style.PRIMARY
        var button_description: String? = null
        val button_metadata = mutableMapOf<String, style>()
        var button_action: ButtonAction? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> button_id = ProtoAdapter.STRING.decode(reader)
            2 -> button_title = ProtoAdapter.STRING.decode(reader)
            3 -> try {
              button_style = style.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            4 -> button_description = ProtoAdapter.STRING.decode(reader)
            5 -> button_metadata.putAll(button_metadataAdapter.decode(reader))
            6 -> button_action = ButtonAction.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ButtonV1(
          button_id = button_id,
          button_title = button_title,
          button_style = button_style,
          button_description = button_description,
          button_metadata = button_metadata,
          button_action = button_action,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ButtonV1): ButtonV1 = value.copy(
        button_action = value.button_action?.let(ButtonAction.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
